---
import Layout from "../../layouts/Layout.astro";
import pharaohs from "../../data/pharaohs.json";
import hieroglyphs from "../../data/hieroglyphics.json";
import dynasties from "../../data/dynasties.json";
import titulary from "../../data/titulary.json";

// Transliterate function
function Translit(inn: string): string {
	const translitMap: Record<string, string> = {
		A: "Ꜣ",
		a: "Ꜥ",
		D: "ḏ",
		x: "ḫ",
		X: "ẖ",
		q: "ḳ",
		T: "ṯ",
		S: "š",
		H: "ḥ",
		j: "ꞽ",
		ii: "y",
	};
	return Object.keys(translitMap).reduce((str, key) => str.replaceAll(key, (translitMap as Record<string, string>)[key]), inn);
}

export async function getStaticPaths() {
	return pharaohs.map((p) => ({
		params: { king: p.slug },
		props: { pharaoh: p },
	}));
}

const { pharaoh } = Astro.props;

// Find all hieroglyphs for this pharaoh (matching 'no' to 'farao')
const phNo = Number(pharaoh.no);
const glyphs = hieroglyphs.filter((h) => h.farao === phNo);

// Group by 'titel'
const glyphGroups: Record<string, any[]> = {};
for (const glyph of glyphs) {
	const key = glyph.titel;
	if (!glyphGroups[key]) glyphGroups[key] = [];
	glyphGroups[key].push(glyph);
}

/* These will be sent to Layout for page name and meta tags */
const title = pharaoh.name;
const meta1 = pharaoh.meta1;
const meta2 = pharaoh.meta2;
const bild = pharaoh.image;
// Compute a stable dynasty URL. dynasties.json contains most slugs (numeric and named).
function getDynURL(dyn: string | number | undefined): string {
	const raw = dyn == null ? "unplaced" : String(dyn);
	// Direct match: some dynasties use numeric slugs ("1", "2", ...)
	const bySlug = dynasties.find((d: any) => d.slug === raw);
	if (bySlug) return `/dynasty/${bySlug.slug}`;

	// Known special numeric codes that map to named slugs
	const special: Record<string, string> = {
		"0": "predynastic",
		"32": "argead",
		"33": "ptolemaic",
		"34": "roman-pharaohs",
		"35": "abydos",
		"36": "unplaced-kings",
	};
	if (special[raw]) return `/dynasty/${special[raw]}`;

	// Fallback: encode and use raw value (keeps link predictable)
	return `/dynasty/${encodeURIComponent(raw)}`;
}

const dynURL = getDynURL(pharaoh.dynasty);

// Map of reign field keys to friendly labels
const reignLabels: Record<string, string> = {
	r_consensus: "",
	r_turin: "Turin King List",
	r_hornung: "Hornung",
	r_shaw: "Shaw",
	r_redford: "Redford",
	r_malek: "Malek",
	r_beckerath: "von Beckerath",
	r_baker: "Baker",
	r_dodson: "Dodson",
	r_arnold: "Arnold",
	r_grimal: "Grimal",
	r_lepsius: "Lepsius",
	r_abydos: "Abydos Canon",
	r_saqqara: "Saqqara Canon",
	r_karnak: "Karnak Canon",
	r_africanus: "Manetho (Africanus)",
	r_eusebius: "Manetho (Eusebius)",
	r_manetho: "Manetho",
	r_josephus: "Josephus",
	r_jerome: "Manetho (Jerome)",
	r_highestyear: "Highest attestation",
	// fallback: other r_... keys will be shown with stripped prefix and underscores replaced
};

// Replace 'KRI,' with full expanded text in source strings (case-sensitive)
function replaceKRI(src: string | undefined) {
	if (!src) return src;
	return src.replace("KRI,", "Kitchen, <i>Ramesside Inscriptions</i>, ");
}

let m1 =
	`The hieroglyphs of ${pharaoh.name}, including rare variants, with detailed descriptions of the titles and the sources of the name. ${pharaoh.aka}`;

let m2 =
	`pharaoh,hieroglyphs,hieroglyphics,pharaoh of Egypt,king of Egypt,Egyptian chronology,hieroglyphic titles,royal egyptian titles,titles of pharaoh,${pharaoh.name},hieroglyphs of ${pharaoh.name},pharaoh,hieroglyphs of ${pharaoh.name},royal titulary egypt,fivefold name,${pharaoh.aka}`;

---

<Layout title={title} meta1={m1} meta2={m2} bild={bild}>
	{
		/** Titulary lookup available to template rendering */
		(() => {
			const myTitulary = titulary.filter((t) => Number(t.farao) === phNo);
			function titularyBy(titelNum: number) {
				return myTitulary.find((t) => Number(t.titel) === Number(titelNum));
			}
			// expose helpers via a symbol on the closure
			(Astro as any).__titularyHelpers = { myTitulary, titularyBy };
			return null;
		})()
	}
	<!-- <h1 class="text-3xl font-bold pb-4">{pharaoh.name}</h1> -->
	<p>Dynasty: <a href={dynURL}>{pharaoh.dynasty}</a></p>

	{pharaoh.aka && <p>Also known as: {pharaoh.aka}</p>}
	{
		pharaoh.reigns && pharaoh.reigns.length > 0 && (
			<section class="pl-4 pb-4 float-right">
				{pharaoh.reigns.map((r) => {
					return (
						<div class="card p-1">
							<div class="mb-2 text-xs border-b text-center">
								Reign of <span class="font-semibold primary">{pharaoh.name}</span>
							</div>
							<div class="text-xs font-normal">
								<table class="">
									{Object.entries(r)
										.filter(([k]) => k !== "id")
										.map(([k, v]) => {
											const label = reignLabels[k] ?? k.replace(/^r_/, "").replace(/_/g, " ");
											return (
												<>
													<tr>
														<td class="text-xs">{label}</td>
														<td class="text-xs tabular-nums">{String(v)}</td>
													</tr>
												</>
											);
										})}
								</table>
							</div>
						</div>
					);
				})}
			</section>
		)
	}
	{pharaoh.description && <article class="mt-4" set:html={pharaoh.description} />}

	<section class="clear-both mt-8">
		<h2 class="text-4xl font-bold text-center border-t bordercolor pt-4">The Royal Titulary</h2>
		<p class="mt-0 text-center pb-6">From the hieroglyphic records</p>
	</section>

	{
		(() => {
			const myTitulary = titulary.filter((t) => Number(t.farao) === phNo);
			const t1 = myTitulary.find((t) => Number(t.titel) === 1);
			const t4 = myTitulary.find((t) => Number(t.titel) === 4);
			const t5 = myTitulary.find((t) => Number(t.titel) === 5);
			if (!t1 && !t4 && !t5) return null;
			return (
				<section class="mt-10 clear-both">
					
					<div class="flex items-center justify-center gap-2 mb-2">
						{t1 && <img src={`/svg/pharaoh/${t1.glyph}.svg`} alt={t1.gname} class="h-12 dark:invert" />}
						{t4 && <img src="/svg/hiero/t_nesut.svg" alt="nesut" class="h-12 dark:invert pl-4" />}
						{t4 && <img src={`/svg/pharaoh/${t4.glyph}.svg`} alt={t4.gname} class="h-12 dark:invert" />}
						{t5 && <img src="/svg/hiero/t_sara.svg" alt="sa Ra" class="h-12 dark:invert pl-4" />}
						{t5 && <img src={`/svg/pharaoh/${t5.glyph}.svg`} alt={t5.gname} class="h-12 dark:invert" />}
					</div>
					<div class="text-center space-y-1">
						{t1 && <span class="font-light text-xs italic">Horus</span> <span>{t1.gname}&nbsp; &nbsp;</span>}
						{t4 && <span class="font-light text-xs italic pl-4">The Dual King</span> <span set:html={t4.gname} />}
						{t5 && <span class="font-light text-xs italic pl-4">Son of Ra</span> <span set:html={t5.gname} />}
					</div>
				</section>
			);
		})()
	}
	{
		Object.keys(glyphGroups).length > 0 && (
			<section class="mt-8 clear-both">
				{Object.entries(glyphGroups).map(([titel, glyphs]) => {
					const titelMap = [
						"", // 0 (unused)
						`<div><h2 class="text-center pt-10 pb-2 text-3xl text-red-800 dark:text-amber-200">Horus</h2><img src="/svg/hiero/t_horus.svg" loading="lazy" class="h-20 dark:invert mx-auto" alt="Horus name"><p class="w-2/3 mx-auto text-center color-2 text-sm/tight text-balance pb-8">The oldest form of the name of a pharaoh, a falcon representing Horus is perched on the palace facade.</p></div>`, // 1
						`<div><h2 class="text-center pt-10 pb-2 text-3xl text-red-800 dark:text-amber-200">Nebty</h2><img src="/svg/hiero/t_nebty.svg" loading="lazy" class="h-20 dark:invert mx-auto" alt="Nebty name"><p class="w-2/3 mx-auto text-center color-2 text-sm/tight text-balance pb-8">The “Two Ladies”, the <i>goddesses Nekhbet and Wadjet</i>, representing Upper and Lower Egypt respectively.</p></div>`, // 2
						`<div><h2 class="text-center pt-10 pb-2 text-3xl text-red-800 dark:text-amber-200">Golden Horus</h2><img src="/svg/hiero/t_gold.svg" loading="lazy" class="h-20 dark:invert mx-auto" alt="Golden Horus name"><p class="w-2/3 mx-auto text-center color-2 text-sm/tight text-balance pb-8">Horus perched on Gold, which was associated with eternity, but its meaning is disputed.</p></div>`, // 3
						`<div><h2 class="text-center pt-10 pb-2 text-3xl text-red-800 dark:text-amber-200">Throne name</h2><img src="/svg/hiero/t_nesut.svg" loading="lazy" class="h-20 dark:invert mx-auto" alt="Prenomen or throne name"><p class="w-2/3 mx-auto text-center color-2 text-sm/tight text-balance pb-8">Announced at the coronation and always written in a cartouche. The “official” name of the pharaoh. Also known as the <i>Prenomen</i>.</p></div>`, // 4
						`<div><h2 class="text-center pt-10 pb-2 text-3xl text-red-800 dark:text-amber-200">Birth name</h2><img src="/svg/hiero/t_sara.svg" loading="lazy" class="h-20 dark:invert mx-auto" alt="Nomen or birth name"><p class="w-2/3 mx-auto text-center color-2 text-sm/tight text-balance pb-8">Personal name given at birth. Also known as the <i>Nomen</i>.</p></div>`, // 5
						``, // 6
						`<div><h2 class="text-center pt-10 pb-2 text-3xl text-red-800 dark:text-amber-200">Throne + Birth name</h2><p class="w-2/3 mx-auto text-center color-2 text-sm/tight text-balance pb-8">Combined Throne and Birth name.</p>`, // 7
						`<div><h2 class="text-center pt-10 pb-2 text-3xl text-red-800 dark:text-amber-200">Autokrator</h2><p class="w-2/3 mx-auto text-center color-2 text-sm/tight text-balance pb-8">The Greek epithet <i class="font-semibold">Autokrator</i> is the equivalent of the Latin epithet <i class="font-semibold">Imperator</i> (Commander).<br>It was always written in the cartouche.</p></div>`, // 8
						`<div><h2 class="text-center pt-10 pb-2 text-3xl text-red-800 dark:text-amber-200">Kaisaros</h2><p class="w-2/3 mx-auto text-center color-2 text-sm/tight text-balance pb-8">The Greek title Kaisaros is the equivalent of the Latin title <i class="font-semibold">Caesar</i>.<br />It was always written in a cartouche.</p>`, // 9
						`<div><h2 class="text-center pt-10 pb-2 text-3xl text-red-800 dark:text-amber-200">Autokrator & Kaisaros</h2><p class="w-2/3 mx-auto text-center color-2 text-sm/tight text-balance pb-8">The Greek title <i>Kaisaros</i> = the Latin title <i>Caesar</i>.<br>The Greek epithet <i>Autokrator</i> = the Latin <i>Imperator</i>.</p>`, // 10
					];
					const titelLabel = titelMap[Number(titel)] || titel;
					return (
						<div class="mb-6">
							<div set:html={titelLabel} />
							<div class="grid gap-4">
								{((glyphs as any[]) ?? []).map((g) => (
									<div class="card">
										<div class="mt-1">
											<img src={`/svg/pharaoh/${g.hiero}.svg`} alt={g.name} class="dark:invert h-14 max-h-24 my-2" />
										</div>
										{g.name && (
											<div
												class="hieroname"
												set:html={
													g.name.endsWith("*")
														? `${g.name.slice(0, -1)}<abbr class="opacity-50 no-underline" title=\"Not contemporaneous, later designation.\">*</abbr>`
														: g.name
												}
											/>
										)}
										{g.tlit && <div class="text-sm tlit" set:html={Translit(g.tlit)} />}
										{g.translation && <div class="text-sm">{g.translation}</div>}
										<div
											class="border-t mt-2 pt-2 text-xs bibliography"
											set:html={[
												replaceKRI(g.source),
												g.lepsius && `Lepsius, <i>Denkmäler aus Ägypten und Äthiopien</i>, ${g.lepsius}`,
												g.beckerath && `Beckerath, “Handbuch der ägyptischen Königsnamen”, 2nd ed. <i>MÄS</i> <b>49</b> (1999). ${g.beckerath}`,
												g.turin && `Turin King List: ${g.turin}`,
												g.gardiner && `Gardiner, <i>The Royal Canon of Turin</i> (1959): ${g.gardiner}`,
												g.abydos && `Abydos Canon No. ${g.abydos}`,
												g.saqqara && `Saqqara Canon No. ${g.saqqara}`,
												g.karnak && `Karnak Canon No. ${g.karnak}`,
											]
												.filter(Boolean)
												.join("<br>")}
										/>
									</div>
								))}
							</div>
						</div>
					);
				})}
			</section>
		)
	}
<!-- Bibliography -->
{/** Render bibliography from pharaoh fields if present */}

{
	(() => {
		const bibFields = ["G17", "G18", "G19", "G20", "G21", "VON", "LPR", "DDB"];
		// Define a mapping of field keys to prefix strings
		const fieldPrefixes = {
			G17: "<b>Gauthier, H.</b> Le livre des rois d'Égypte. <i>MIFAO</i> <b>17</b> (1907): ",
			G18: "<b>Gauthier, H.</b> Le livre des rois d'Égypte. <i>MIFAO</i> <b>18</b> (1912): ",
			G19: "<b>Gauthier, H.</b> Le livre des rois d'Égypte. <i>MIFAO</i> <b>19</b> (1913): ",
			G20: "<b>Gauthier, H.</b> Le livre des rois d'Égypte. <i>MIFAO</i> <b>20</b> (1915): ",
			G21: "<b>Gauthier, H.</b> Le livre des rois d'Égypte. <i>MIFAO</i> <b>21</b> (1917): ",
			VON: "<b>Beckerath, J.</b>, 1999. “Handbuch der ägyptischen Königsnamen”, Second edition, <i>MÄS</i> <b>49</b> (1999): ",
			LPR: "<b>Leprohon, R. J.</b>, 2013. <i>The Great Name: Ancient Egyptian Royal Titulary</i>. ",
			DDB: "<b>Baker. D. D.</b>, 2008. <i>The Encyclopedia of the Pharaohs: Volume I</i>. ",
		};
		const entries: { key: string; value: string }[] = [];
		for (const f of bibFields) {
			const val = (pharaoh as any)[f];
			if (val) entries.push({ key: f, value: val });
		}
		if (entries.length === 0) return null;
		return (
			<section class="my-12">
				<h2 class="text-3xl font-semibold mb-4">Bibliography</h2>
				<ul class="list-none pl-6 text-sm leading-loose">
					{entries.map(({ key, value }) => {
						const prefix = fieldPrefixes[key as keyof typeof fieldPrefixes] || "";
						// Build the raw HTML string for the <li> content (prefix + value only)
						const liContent = prefix + value;
						return <li set:html={liContent}></li>;
					})}
				</ul>
			</section>
		);
	})()
}


</Layout>

<style>
	.hieroname {
		font-size: var(--text-2xl);
		font-weight: var(--font-weight-light);
		i {
			font-style: italic;
			font-size: var(--text-xl);
			color: light-dark(var(--dim), var(--dark-dim));
		}
	}
</style>

