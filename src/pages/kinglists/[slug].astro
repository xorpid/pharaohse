---
import Layout from "../../layouts/Layout.astro";
import kinglists from "../../data/kinglists.json";
import abydos from "../../data/kl_abydos.json";
import saqqara from "../../data/kl_saqqara.json";
import karnak from "../../data/kl_karnak.json";
import ramesseum from "../../data/kl_ramesseum.json";
import marseille from "../../data/kl_marseille.json";
import medinet from "../../data/kl_medinet.json";
import kings from "../../data/pharaohs.json";

export async function getStaticPaths() {
	return kinglists.map((p) => ({
		params: { slug: p.slug },
		props: { kinglist: p },
	}));
}

// Transliterate function
function Translit(inn: string): string {
	const translitMap: Record<string, string> = {
		A: "Ꜣ",
		a: "Ꜥ",
		D: "ḏ",
		x: "ḫ",
		X: "ẖ",
		q: "ḳ",
		T: "ṯ",
		S: "š",
		H: "ḥ",
		j: "ꞽ",
		ii: "y",
	};
	return Object.keys(translitMap).reduce((str, key) => str.replaceAll(key, (translitMap as Record<string, string>)[key]), inn);
}

// Map slug to data array
const kinglistData = {
	"abydos-canon": abydos,
	"saqqara-canon": saqqara,
	"karnak-canon": karnak,
	marseille: marseille,
	"ramesseum-canon": ramesseum,
	"medinet-habu-canon": medinet,
};

const { kinglist } = Astro.props;
const { slug } = Astro.params as { slug: keyof typeof kinglistData };

const title = kinglist.name;
const meta1 = kinglist.meta1;
const meta2 = kinglist.meta2;
const bild = kinglist.image;

const items = kinglistData[slug] ?? [];

// Map kinglist slug -> svg subfolder
const svgFolderMap = {
	"abydos-canon": "ac",
	"saqqara-canon": "sc",
	"karnak-canon": "kc",
	"ramesseum-canon": "rs",
	marseille: "ms",
	"medinet-habu-canon": "mh",
};

const svgFolder = svgFolderMap[slug] ?? "misc";

// Dynamically import Markdown intro for the kinglist
let IntroComponent = null;
let hasMarkdown = false;
try {
	const mdModule = await import(`../../data/intros/${slug}.md`);
	IntroComponent = mdModule.Content;
	hasMarkdown = true;
} catch (e) {
	// fallback to JSON intro if Markdown is missing
}

// Debugging: Log data to verify
console.log("Kinglist items:", items);
console.log("Pharaohs:", kings);
---

<Layout title={title} meta1={meta1} meta2={meta2} bild={bild}>
	{
		hasMarkdown && IntroComponent && (
			<article class="mt-4">
				<IntroComponent />
			</article>
		)
	}
	{
		items.length > 0 && (
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6 my-10">
				{items.map((item) => (
					<div class="bg-light text rounded-lg shadow-md p-4 flex flex-col gap-2 text-center">
						{item.bild && <img src={`/svg/${svgFolder}/${item.bild}.svg`} alt={item.namn} class="h-20 dark:invert object-contain" />}
						<div class="font-bold font-serif text-2xl tracking-wide" set:html={item.namn} />
						{item.tlit && <div class="tlit">{Translit(item.tlit)}</div>}
						{item.meaning && <div class="">{item.meaning}</div>}
						<div class="flex justify-between">
							{item.nr && <div class="font-mono">No: {item.nr}</div>}
							{item.farao !== undefined && (
								<div class="">
									{(() => {
										if (item.farao === 0) {
											return <span>Unknown</span>;
										}
										const pharaoh = kings.find((pharaoh) => Number(pharaoh.no) === item.farao);
										return pharaoh ? <a href={`/pharaohs/${pharaoh.slug}`}>{pharaoh.name}</a> : null;
									})()}
								</div>
							)}
						</div>
					</div>
				))}
			</div>
		)
	}

	{
		kinglist.bibliography && kinglist.bibliography.length > 0 && (
			<section class="mt-12">
				<h2 class="text-2xl font-bold mb-4">Bibliography</h2>
				<ul class="list-none list-inside space-y-2">
					{kinglist.bibliography.map((title) => (
						<li>{title}</li>
					))}
				</ul>
			</section>
		)
	}
</Layout>
