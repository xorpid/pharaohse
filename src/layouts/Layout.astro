---
import "@/styles/global.css";
import Head from "@/components/Head.astro";
import pharaohs from "../data/pharaohs.json";
import Header from "@/components/header.astro";
import Footer from "@/components/footer.astro";

const currentPath = Astro.url.pathname;
export interface Props {
	title?: string;
	meta1?: string;
	meta2?: string;
	volid?: string;
	bild?: string;
}
const sitename = "Egypt";
const { title, meta1, meta2, bild, frontmatter } = Astro.props as Props & { frontmatter?: any };

// Prefer frontmatter values when rendering Markdown pages
const resolvedTitle = frontmatter && frontmatter.pagename ? frontmatter.pagename : title;
const resolvedMeta1 = frontmatter && frontmatter.description ? frontmatter.description : meta1;
const resolvedMeta2 = frontmatter && frontmatter.tags ? (Array.isArray(frontmatter.tags) ? frontmatter.tags.join(", ") : frontmatter.tags) : meta2;
const resolvedBild = frontmatter && frontmatter.image ? frontmatter.image : bild;
---

<html lang="en">
	<Head title={resolvedTitle} meta1={resolvedMeta1} meta2={resolvedMeta2} bild={resolvedBild} frontmatter={frontmatter} />
	<body class="bg-stone-200 dark:bg-neutral-900 text-stone-800 dark:text-neutral-200 transition-colors">
		<Header />
		<div class="max-w-4xl mx-auto px-4">
			<h1 class="pagetitle" set:html={resolvedTitle} />
		</div>
		<div class="max-w-4xl mx-auto min-h-96">
			<div>
				<article class="w-full px-4">
					<slot />
					<div id="references"><h2 class="py-3">References</h2></div>
					<div class="py-10 my-5 print:hidden" aria-hidden="true">
						<img
							src="/svg/thoth.svg"
							loading="lazy"
							class="mx-auto h-28 opacity-50 transition duration-300 hover:opacity-100"
							alt="Thoth"
							title="You have reached the end of the page. This is Thoth, the wise God of writing and hieroglyphs."
							srcset=""
						/>
						<p class="text-center uppercase font-sans text-xs pt-3">
							<abbr class="text-stone-400 dark:text-shark-700 no-underline opacity-30" title="Latin for: Nothing comes from nothing"
								>Ex nihilo nihil fit</abbr
							>
						</p>
					</div>
					<div class="hidden print:block print:py-20 text-center">
						<h3>Original text from:</h3><a href="https://pharaoh.se{currentPath}" class="font-mono text-sm text-black"
							><img src="/svg/pharaohse.svg" alt="Pharaoh.SE" class="w-60 mx-auto block" />https://pharaoh.se{currentPath}</a
						>
					</div>
				</article>
			</div>
		</div>
		<Footer />
	</body>
</html>

<script>
	document.querySelectorAll("[popovertarget]").forEach((trigger) => {
		const targetId = trigger.getAttribute("popovertarget");
		const popover = document.getElementById(targetId);

		if (!popover) return;

		let timeout;

		trigger.addEventListener("mouseenter", () => {
			timeout = setTimeout(() => popover.showPopover(), 50);
		});

		trigger.addEventListener("mouseleave", () => {
			clearTimeout(timeout);
			popover.hidePopover();
		});

		// Optional: keep popover visible when hovering over it
		popover.addEventListener("mouseenter", () => clearTimeout(timeout));
		popover.addEventListener("mouseleave", () => popover.hidePopover());
	});

	// Aggregate popover contents into the #references container (if present)
	// Behaviour: build an ordered list (<ol>) in #references, one <li> per unique popover id
	// Removes a "<p>1</p>" when present so list numbering is handled by <ol>.
	document.addEventListener("DOMContentLoaded", () => {
		const referencesContainer = document.getElementById("references");
		if (!referencesContainer) return;

		// Create or reuse an ordered list for references
		let ol = referencesContainer.querySelector("ol.references-list");
		if (!ol) {
			ol = document.createElement("ol");
			ol.className = "references-list list-decimal ml-6 my-0 columns-2 gap-8 break-inside-avoid align-top text-xs leading-relaxed";
			referencesContainer.appendChild(ol);
		} else {
			ol.innerHTML = "";
		}

		const added = new Set();
		document.querySelectorAll("[popovertarget]").forEach((trigger) => {
			const targetId = trigger.getAttribute("popovertarget");
			if (!targetId || added.has(targetId)) return;
			const popover = document.getElementById(targetId);
			if (!popover) return;

			// Parse popover content into a temporary element so we can remove a leading numeric <p>
			const temp = document.createElement("div");
			temp.innerHTML = popover.innerHTML || "";

			const firstEl = temp.firstElementChild;
			if (firstEl && firstEl.tagName.toLowerCase() === "p") {
				const txt = (firstEl.textContent || "").trim();
				if (/^\d+$/.test(txt)) {
					// remove that numeric paragraph
					temp.removeChild(firstEl);
				}
			}

			const li = document.createElement("li");
			li.className = "reference-item mb-2";
			li.id = `ref-${targetId}`;
			li.innerHTML = temp.innerHTML.trim();

			ol.appendChild(li);
			added.add(targetId);
		});

		// If nothing was added, remove the empty list and hide the references container
		if (added.size === 0) {
			if (ol && ol.parentNode) ol.remove();
			referencesContainer.style.display = "none";
		} else {
			// ensure visible when there are references
			referencesContainer.style.display = "";
		}
	});
</script>
